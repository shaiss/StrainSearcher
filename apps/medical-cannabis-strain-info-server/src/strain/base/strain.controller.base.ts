/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StrainService } from "../strain.service";
import { StrainCreateInput } from "./StrainCreateInput";
import { Strain } from "./Strain";
import { StrainFindManyArgs } from "./StrainFindManyArgs";
import { StrainWhereUniqueInput } from "./StrainWhereUniqueInput";
import { StrainUpdateInput } from "./StrainUpdateInput";

export class StrainControllerBase {
  constructor(protected readonly service: StrainService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Strain })
  async createStrain(@common.Body() data: StrainCreateInput): Promise<Strain> {
    return await this.service.createStrain({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Strain] })
  @ApiNestedQuery(StrainFindManyArgs)
  async strains(@common.Req() request: Request): Promise<Strain[]> {
    const args = plainToClass(StrainFindManyArgs, request.query);
    return this.service.strains({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Strain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async strain(
    @common.Param() params: StrainWhereUniqueInput
  ): Promise<Strain | null> {
    const result = await this.service.strain({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Strain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStrain(
    @common.Param() params: StrainWhereUniqueInput,
    @common.Body() data: StrainUpdateInput
  ): Promise<Strain | null> {
    try {
      return await this.service.updateStrain({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          imageUrl: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Strain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStrain(
    @common.Param() params: StrainWhereUniqueInput
  ): Promise<Strain | null> {
    try {
      return await this.service.deleteStrain({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          imageUrl: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/create-strain")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateStrain(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.CreateStrain(body);
  }
}
