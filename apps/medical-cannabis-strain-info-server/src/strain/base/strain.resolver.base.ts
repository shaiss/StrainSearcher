/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Strain } from "./Strain";
import { StrainCountArgs } from "./StrainCountArgs";
import { StrainFindManyArgs } from "./StrainFindManyArgs";
import { StrainFindUniqueArgs } from "./StrainFindUniqueArgs";
import { CreateStrainArgs } from "./CreateStrainArgs";
import { UpdateStrainArgs } from "./UpdateStrainArgs";
import { DeleteStrainArgs } from "./DeleteStrainArgs";
import { StrainService } from "../strain.service";
@graphql.Resolver(() => Strain)
export class StrainResolverBase {
  constructor(protected readonly service: StrainService) {}

  async _strainsMeta(
    @graphql.Args() args: StrainCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Strain])
  async strains(@graphql.Args() args: StrainFindManyArgs): Promise<Strain[]> {
    return this.service.strains(args);
  }

  @graphql.Query(() => Strain, { nullable: true })
  async strain(
    @graphql.Args() args: StrainFindUniqueArgs
  ): Promise<Strain | null> {
    const result = await this.service.strain(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Strain)
  async createStrain(@graphql.Args() args: CreateStrainArgs): Promise<Strain> {
    return await this.service.createStrain({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Strain)
  async updateStrain(
    @graphql.Args() args: UpdateStrainArgs
  ): Promise<Strain | null> {
    try {
      return await this.service.updateStrain({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Strain)
  async deleteStrain(
    @graphql.Args() args: DeleteStrainArgs
  ): Promise<Strain | null> {
    try {
      return await this.service.deleteStrain(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async CreateStrain(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.CreateStrain(args);
  }
}
