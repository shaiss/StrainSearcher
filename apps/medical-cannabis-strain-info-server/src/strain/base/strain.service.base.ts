/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Strain as PrismaStrain } from "@prisma/client";

export class StrainServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StrainCountArgs, "select">): Promise<number> {
    return this.prisma.strain.count(args);
  }

  async strains<T extends Prisma.StrainFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StrainFindManyArgs>
  ): Promise<PrismaStrain[]> {
    return this.prisma.strain.findMany<Prisma.StrainFindManyArgs>(args);
  }
  async strain<T extends Prisma.StrainFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StrainFindUniqueArgs>
  ): Promise<PrismaStrain | null> {
    return this.prisma.strain.findUnique(args);
  }
  async createStrain<T extends Prisma.StrainCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StrainCreateArgs>
  ): Promise<PrismaStrain> {
    return this.prisma.strain.create<T>(args);
  }
  async updateStrain<T extends Prisma.StrainUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StrainUpdateArgs>
  ): Promise<PrismaStrain> {
    return this.prisma.strain.update<T>(args);
  }
  async deleteStrain<T extends Prisma.StrainDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StrainDeleteArgs>
  ): Promise<PrismaStrain> {
    return this.prisma.strain.delete(args);
  }
  async CreateStrain(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
